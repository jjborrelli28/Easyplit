generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?            @map("email_verified")
  image              String?
  password           String?
  verifyToken        String?              @unique @map("verify_token")
  verifyTokenExp     DateTime?            @unique @map("verify_token_exp")
  resetToken         String?              @unique @map("reset_token")
  resetTokenExp      DateTime?            @unique @map("reset_token_exp")
  createdAt          DateTime             @default(now())
  expensesCreated    Expense[]            @relation("CreatedBy")
  expensesPaid       Expense[]            @relation("PaidBy")
  ExpenseParticipant ExpenseParticipant[]
  groupsCreated      Group[]              @relation("UserCreatedGroups")
  GroupMember        GroupMember[]
  accounts           Account[]
  ExpenseHistory     ExpenseHistory[]
  GroupHistory       GroupHistory[]
  sessions           Session[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Expense {
  id             String               @id @default(cuid())
  amount         Float
  paidById       String               @map("paid_by")
  groupId        String?
  createdAt      DateTime             @default(now())
  name           String
  type           ExpenseType?
  createdById    String?              @map("created_by")
  paymentDate    DateTime?
  createdBy      User?                @relation("CreatedBy", fields: [createdById], references: [id])
  group          Group?               @relation(fields: [groupId], references: [id])
  paidBy         User                 @relation("PaidBy", fields: [paidById], references: [id])
  participants   ExpenseParticipant[]
  ExpenseHistory ExpenseHistory[]
}

model ExpenseParticipant {
  id        String  @id @default(cuid())
  expenseId String
  userId    String
  amount    Float
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
}

model ExpenseHistory {
  id          String   @id @default(cuid())
  expenseId   String
  field       String
  oldValue    String?
  newValue    String?
  createdAt   DateTime @default(now())
  updatedById String   @map("updated_by")
  expense     Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  updatedBy   User     @relation(fields: [updatedById], references: [id])

  @@index([expenseId])
  @@map("expense_history")
}

model Group {
  id           String         @id @default(cuid())
  name         String
  createdAt    DateTime       @default(now())
  createdById  String         @map("created_by")
  type         GroupType?     @default(OTHER)
  expenses     Expense[]
  createdBy    User           @relation("UserCreatedGroups", fields: [createdById], references: [id], onDelete: Cascade)
  members      GroupMember[]
  GroupHistory GroupHistory[]
}

model GroupHistory {
  id          String   @id @default(cuid())
  groupId     String
  field       String
  oldValue    String?
  newValue    String?
  createdAt   DateTime @default(now())
  updatedById String   @map("updated_by")
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  updatedBy   User     @relation(fields: [updatedById], references: [id])

  @@index([groupId])
  @@map("group_history")
}

model GroupMember {
  id      String @id @default(cuid())
  userId  String
  groupId String
  group   Group  @relation(fields: [groupId], references: [id])
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

enum ExpenseType {
  HOUSE_ELECTRONICS
  HOUSE_FORNITURE
  HOUSE_MAINTENANCE
  HOUSE_MORTGAGE
  HOUSE_OTHER
  HOUSE_PETS
  HOUSE_RENT
  HOUSE_SERVICES
  HOUSE_SUPPLIES
  FOOD_DRINKS
  FOOD_FOOD
  FOOD_OTHER
  FOOD_UTENSILS
  ENTERTAINMENT_GAMES
  ENTERTAINMENT_MOVIES
  ENTERTAINMENT_MUSIC
  ENTERTAINMENT_OTHER
  ENTERTAINMENT_SPORTS
  UNCATEGORIZED
  TRANSPORT_BUS
  TRANSPORT_CAR
  TRANSPORT_FUEL
  TRANSPORT_HOTEL
  TRANSPORT_OTHER
  TRANSPORT_PARKING
  TRANSPORT_PLANE
  TRANSPORT_TAXI
  TRANSPORT_TRAIN
  UTILITIES_CLEANING
  UTILITIES_HEATING
  UTILITIES_LIGHT
  UTILITIES_OTHER
  UTILITIES_PHONE
  UTILITIES_TRASH
  UTILITIES_TV
  UTILITIES_WATTER
  UTILITIES_WIFI
  LIFE_CLOTHES
  LIFE_DOCTORS
  LIFE_GIFTS
  LIFE_INSURANCES
  LIFE_NURSERY
  LIFE_OTHER
  LIFE_TAXES
  LIFE_UNIVERSITY
}

enum GroupType {
  HOUSEHOLD
  TRIP
  FRIENDS
  COUPLE
  FAMILY
  OTHER
}
