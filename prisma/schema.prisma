generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  password       String?
  verifyToken    String?   @unique @map("verify_token")
  verifyTokenExp DateTime? @unique @map("verify_token_exp")
  resetToken     String?   @unique @map("reset_token")
  resetTokenExp  DateTime? @unique @map("reset_token_exp")
  createdAt      DateTime  @default(now())
  accounts       Account[]
  sessions       Session[]

  groupsCreated      Group[]              @relation("UserCreatedGroups")
  GroupMember        GroupMember[]
  Expense            Expense[]
  ExpenseParticipant ExpenseParticipant[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Group {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  createdById String        @map("created_by")
  createdBy   User          @relation("UserCreatedGroups", fields: [createdById], references: [id])
  members     GroupMember[]
  expenses    Expense[]
}

model GroupMember {
  id      String @id @default(cuid())
  userId  String
  groupId String
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model Expense {
  id           String               @id @default(cuid())
  title        String
  amount       Float
  paidById     String               @map("paid_by")
  paidBy       User                 @relation(fields: [paidById], references: [id])
  groupId      String?
  group        Group?               @relation(fields: [groupId], references: [id])
  createdAt    DateTime             @default(now())
  participants ExpenseParticipant[]
}

model ExpenseParticipant {
  id        String @id @default(cuid())
  expenseId String
  userId    String
  amount    Float

  expense Expense @relation(fields: [expenseId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
}
