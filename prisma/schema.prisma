generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  password       String?
  verifyToken    String?   @unique @map("verify_token")
  verifyTokenExp DateTime? @unique @map("verify_token_exp")
  resetToken     String?   @unique @map("reset_token")
  resetTokenExp  DateTime? @unique @map("reset_token_exp")
  createdAt      DateTime  @default(now())

  accounts Account[]
  sessions Session[]

  groupsCreated      Group[]              @relation("UserCreatedGroups")
  GroupMember        GroupMember[]
  ExpenseParticipant ExpenseParticipant[]

  expensesPaid    Expense[] @relation("PaidBy")
  expensesCreated Expense[] @relation("CreatedBy")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum ExpenseType {
  HOUSE_ELECTRONICS
  HOUSE_FORNITURE
  HOUSE_MAINTENANCE
  HOUSE_MORTGAGE
  HOUSE_OTHER
  HOUSE_PETS
  HOUSE_RENT
  HOUSE_SERVICES
  HOUSE_SUPPLIES

  FOOD_DRINKS
  FOOD_FOOD
  FOOD_OTHER
  FOOD_UTENSILS

  ENTERTAINMENT_GAMES
  ENTERTAINMENT_MOVIES
  ENTERTAINMENT_MUSIC
  ENTERTAINMENT_OTHER
  ENTERTAINMENT_SPORTS

  UNCATEGORIZED

  TRANSPORT_BUS
  TRANSPORT_CAR
  TRANSPORT_FUEL
  TRANSPORT_HOTEL
  TRANSPORT_OTHER
  TRANSPORT_PARKING
  TRANSPORT_PLANE
  TRANSPORT_TAXI
  TRANSPORT_TRAIN

  UTILITIES_CLEANING
  UTILITIES_HEATING
  UTILITIES_LIGHT
  UTILITIES_OTHER
  UTILITIES_PHONE
  UTILITIES_TRASH
  UTILITIES_TV
  UTILITIES_WATTER
  UTILITIES_WIFI

  LIFE_CLOTHES
  LIFE_DOCTORS
  LIFE_GIFTS
  LIFE_INSURANCES
  LIFE_NURSERY
  LIFE_OTHER
  LIFE_TAXES
  LIFE_UNIVERSITY
}

model Expense {
  id     String       @id @default(cuid())
  name   String
  type   ExpenseType?
  amount Float

  paidById    String    @map("paid_by")
  paidBy      User      @relation("PaidBy", fields: [paidById], references: [id])
  paymentDate DateTime?

  createdById String? @map("created_by")
  createdBy   User?   @relation("CreatedBy", fields: [createdById], references: [id])

  participants ExpenseParticipant[]

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  createdAt DateTime @default(now())
}

model ExpenseParticipant {
  id        String @id @default(cuid())
  expenseId String
  userId    String
  amount    Float

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
}

enum GroupType {
  HOUSEHOLD
  TRIP
  FRIENDS
  COUPLE
  FAMILY
  OTHER
}

model Group {
  id   String     @id @default(cuid())
  name String
  type GroupType? @default(OTHER)

  createdById String @map("created_by")
  createdBy   User   @relation("UserCreatedGroups", fields: [createdById], references: [id], onDelete: Cascade)

  members GroupMember[]

  expenses Expense[]

  createdAt DateTime @default(now())
}

model GroupMember {
  id      String @id @default(cuid())
  userId  String
  groupId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}
